
import java.util.*;
import java.io.*;
public class Main {
    
    public static void main(String args[]) {
        Scanner input = new Scanner(System.in);
        int n = input.nextInt();
        int m = input.nextInt();
        LinkedList a = new LinkedList();
        LinkedList b = new LinkedList();
        for(int i = 0; i < n; i++){
            a.add(input.nextInt());
        }
        for(int i = 0; i < m; i++){
            b.add(input.nextInt());
        }
        LinkedList ans = new LinkedList();
        Solution A = new Solution();
        ans.head = A.addTwoLinkedLists(a.head, b.head);
        ans.printList();

    }
   
}


class Node{
    int data;
    Node next;
    Node(int data){
        this.data = data;
        next = null;
    }
}
class LinkedList{
    Node head;
    void add(int data){
        Node new_node = new Node(data);
        if(head == null){
            head = new_node;
            return;
        }
        Node curr = head;
        while(curr.next != null)
            curr = curr.next;
        curr.next = new_node;
    }
    void printList()
    {
        Node temp = head;
        while (temp != null)
        {
           System.out.print(temp.data+" ");
           temp = temp.next;
        }  
        System.out.println();
    }
    
      public static Node reverseList(Node head) {
        Node prev = null;
        Node curr = head;
        
        while(curr!=null){
            // save next pointer 
            Node nextOfCurr = curr.next;
            
            // reverse pointer
            curr.next = prev;
            
            // move pointers to the next 2 nodes
            prev = curr;
            curr = nextOfCurr;
        }
        // head is now at prev
        head = prev;

        return head;
    }
}


class Solution extends LinkedList
{

    public static Node addTwoLinkedLists(Node head1, Node head2)
    {
        //Write your code here
        LinkedList l3=new LinkedList();
        Node l1=Solution.reverseList(head1);
        Node l2=Solution.reverseList(head2);
        int caryy=0;
        while(l1!=null&&l2!=null)
        {
            int value=l1.data+l2.data+caryy;
            caryy=value/10;
            int l3Value=value%10;
            l3.add(l3Value);
            l1=l1.next;
            l2=l2.next;
            
        }
        while(l1!=null)
        {
            int value=l1.data+caryy;
            caryy=value/10;
            int l3Value=value%10;
            l3.add(l3Value);
            
            l1=l1.next;
            
            
        }
        while(l2!=null)
        {
            int value=l2.data+caryy;
            caryy=value/10;
            int l3Value=value%10;
            l3.add(l3Value);
            l2=l2.next;
            
            
        }
        if(caryy!=0){
           l3.add(caryy);
        }
        Node rev=reverseList(l3.head);
        return rev;
        
    }
    
}